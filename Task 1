{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9407907,"sourceType":"datasetVersion","datasetId":5712297}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-17T00:09:37.801343Z","iopub.execute_input":"2024-09-17T00:09:37.801823Z","iopub.status.idle":"2024-09-17T00:09:38.251169Z","shell.execute_reply.started":"2024-09-17T00:09:37.801778Z","shell.execute_reply":"2024-09-17T00:09:38.249975Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"/kaggle/input/supermarket-transactions/supermarket_transactions.xlsx\n","output_type":"stream"}]},{"cell_type":"code","source":"# read in the excel file\ndf = pd.read_excel('/kaggle/input/supermarket-transactions/supermarket_transactions.xlsx')","metadata":{"execution":{"iopub.status.busy":"2024-09-17T00:09:38.253306Z","iopub.execute_input":"2024-09-17T00:09:38.253791Z","iopub.status.idle":"2024-09-17T00:10:03.649211Z","shell.execute_reply.started":"2024-09-17T00:09:38.253751Z","shell.execute_reply":"2024-09-17T00:10:03.647974Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-17T00:10:03.651040Z","iopub.execute_input":"2024-09-17T00:10:03.651589Z","iopub.status.idle":"2024-09-17T00:10:03.693249Z","shell.execute_reply.started":"2024-09-17T00:10:03.651544Z","shell.execute_reply":"2024-09-17T00:10:03.692168Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0                                    id           timestamp  \\\n0           0  47d54138-a950-4ec0-9d4a-e637e8dfb290 2022-04-28 09:11:00   \n1           1  dea298b1-26ca-4a43-bcef-4050fb74ce1d 2019-12-06 16:21:00   \n2           2  8dcd78f6-2e68-4fe3-9bb0-afe3bb2c3944 2019-06-22 15:27:00   \n3           3  261c100c-b121-44b7-bc03-787f396c2061 2020-08-16 18:14:00   \n4           4  7d025b4d-caac-40a5-b954-63cd7bd20f92 2019-11-12 15:46:00   \n\n   quantity                            product_id product_name  unit_price  \\\n0        10  56b274d1-b2a4-47be-abaf-6c1c7742beb9        wheat        0.39   \n1         1  56b274d1-b2a4-47be-abaf-6c1c7742beb9        wheat        0.39   \n2        10  56b274d1-b2a4-47be-abaf-6c1c7742beb9        wheat        0.39   \n3         8  56b274d1-b2a4-47be-abaf-6c1c7742beb9        wheat        0.39   \n4         1  56b274d1-b2a4-47be-abaf-6c1c7742beb9        wheat        0.39   \n\n   total_amount              store payment_method  \\\n0          3.90    South Billyview           cash   \n1          0.39       South Edward    contactless   \n2          3.90    South Billyview    contactless   \n3          3.12  South Michaelfurt    credit card   \n4          0.39    Christopherfurt           cash   \n\n                            customer_id customer_type  \n0  c2b9eddd-df8c-446a-ae34-50ad88f28e0a    non-member  \n1  134a3c2c-8ccc-494c-9916-a15ff10a9125        member  \n2  a310b698-4e34-4a4a-8c60-e72fad63f9ba          gold  \n3  0dfaced3-271c-4da0-80fc-fd3de4328bd5     corporate  \n4  b05efb3f-c38e-4b86-8366-32e42340a4dc          gold  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>id</th>\n      <th>timestamp</th>\n      <th>quantity</th>\n      <th>product_id</th>\n      <th>product_name</th>\n      <th>unit_price</th>\n      <th>total_amount</th>\n      <th>store</th>\n      <th>payment_method</th>\n      <th>customer_id</th>\n      <th>customer_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>47d54138-a950-4ec0-9d4a-e637e8dfb290</td>\n      <td>2022-04-28 09:11:00</td>\n      <td>10</td>\n      <td>56b274d1-b2a4-47be-abaf-6c1c7742beb9</td>\n      <td>wheat</td>\n      <td>0.39</td>\n      <td>3.90</td>\n      <td>South Billyview</td>\n      <td>cash</td>\n      <td>c2b9eddd-df8c-446a-ae34-50ad88f28e0a</td>\n      <td>non-member</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>dea298b1-26ca-4a43-bcef-4050fb74ce1d</td>\n      <td>2019-12-06 16:21:00</td>\n      <td>1</td>\n      <td>56b274d1-b2a4-47be-abaf-6c1c7742beb9</td>\n      <td>wheat</td>\n      <td>0.39</td>\n      <td>0.39</td>\n      <td>South Edward</td>\n      <td>contactless</td>\n      <td>134a3c2c-8ccc-494c-9916-a15ff10a9125</td>\n      <td>member</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>8dcd78f6-2e68-4fe3-9bb0-afe3bb2c3944</td>\n      <td>2019-06-22 15:27:00</td>\n      <td>10</td>\n      <td>56b274d1-b2a4-47be-abaf-6c1c7742beb9</td>\n      <td>wheat</td>\n      <td>0.39</td>\n      <td>3.90</td>\n      <td>South Billyview</td>\n      <td>contactless</td>\n      <td>a310b698-4e34-4a4a-8c60-e72fad63f9ba</td>\n      <td>gold</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>261c100c-b121-44b7-bc03-787f396c2061</td>\n      <td>2020-08-16 18:14:00</td>\n      <td>8</td>\n      <td>56b274d1-b2a4-47be-abaf-6c1c7742beb9</td>\n      <td>wheat</td>\n      <td>0.39</td>\n      <td>3.12</td>\n      <td>South Michaelfurt</td>\n      <td>credit card</td>\n      <td>0dfaced3-271c-4da0-80fc-fd3de4328bd5</td>\n      <td>corporate</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>7d025b4d-caac-40a5-b954-63cd7bd20f92</td>\n      <td>2019-11-12 15:46:00</td>\n      <td>1</td>\n      <td>56b274d1-b2a4-47be-abaf-6c1c7742beb9</td>\n      <td>wheat</td>\n      <td>0.39</td>\n      <td>0.39</td>\n      <td>Christopherfurt</td>\n      <td>cash</td>\n      <td>b05efb3f-c38e-4b86-8366-32e42340a4dc</td>\n      <td>gold</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-17T00:10:03.694781Z","iopub.execute_input":"2024-09-17T00:10:03.695171Z","iopub.status.idle":"2024-09-17T00:10:03.702589Z","shell.execute_reply.started":"2024-09-17T00:10:03.695133Z","shell.execute_reply":"2024-09-17T00:10:03.701206Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"(50783, 12)"},"metadata":{}}]},{"cell_type":"code","source":"df.columns","metadata":{"execution":{"iopub.status.busy":"2024-09-17T00:10:03.705876Z","iopub.execute_input":"2024-09-17T00:10:03.706255Z","iopub.status.idle":"2024-09-17T00:10:03.716256Z","shell.execute_reply.started":"2024-09-17T00:10:03.706216Z","shell.execute_reply":"2024-09-17T00:10:03.715074Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"Index(['Unnamed: 0', 'id', 'timestamp', 'quantity', 'product_id',\n       'product_name', 'unit_price', 'total_amount', 'store', 'payment_method',\n       'customer_id', 'customer_type'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"markdown","source":"1. Across locations, how many apples were purchased in cash?","metadata":{}},{"cell_type":"code","source":"# Filter for apples purchased with cash\napple_cash_purchases = df[(df['product_name'].str.lower() == 'apple') & (df['payment_method'].str.lower() == 'cash')]\ntotal_apples_in_cash = apple_cash_purchases['quantity'].sum()\nprint(total_apples_in_cash, \"apples were purchased in cash.\")","metadata":{"execution":{"iopub.status.busy":"2024-09-17T00:10:03.717798Z","iopub.execute_input":"2024-09-17T00:10:03.718203Z","iopub.status.idle":"2024-09-17T00:10:03.782995Z","shell.execute_reply.started":"2024-09-17T00:10:03.718154Z","shell.execute_reply":"2024-09-17T00:10:03.781940Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"117 apples were purchased in cash.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"2. How much total cash was spent on these apples?","metadata":{}},{"cell_type":"code","source":"# Create the 'total_cost' column using .loc\napple_cash_purchases.loc[:, 'total_cost'] = apple_cash_purchases['quantity'] * apple_cash_purchases['unit_price']\ntotal_apple_cost = apple_cash_purchases['total_cost'].sum()\nprint(\"$\",end='') \nprint(total_apple_cost, \"was spent on apples.\")","metadata":{"execution":{"iopub.status.busy":"2024-09-17T00:10:03.784490Z","iopub.execute_input":"2024-09-17T00:10:03.784908Z","iopub.status.idle":"2024-09-17T00:10:03.794140Z","shell.execute_reply.started":"2024-09-17T00:10:03.784866Z","shell.execute_reply":"2024-09-17T00:10:03.792963Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"$537.03 was spent on apples.\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_36/1596046797.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  apple_cash_purchases.loc[:, 'total_cost'] = apple_cash_purchases['quantity'] * apple_cash_purchases['unit_price']\n","output_type":"stream"}]},{"cell_type":"markdown","source":"3. Across all payment methods, how much money was spent at the Bakershire store location by non-member customers?","metadata":{}},{"cell_type":"code","source":"# Create the 'total_cost' column using .loc\ndf.loc[:, 'total_cost'] = df['quantity'] * df['unit_price']\nbakershire_and_nonmember = df[(df['store'] == 'Bakershire') & (df['customer_type'] == 'non-member')]\ntotal_bakershire_nonmember_cost = bakershire_and_nonmember['total_cost'].sum()\nprint(\"$\",end='') \nprint(round(total_bakershire_nonmember_cost, 2), \"was spent by non-members at Bakershire.\")","metadata":{"execution":{"iopub.status.busy":"2024-09-17T00:10:24.420749Z","iopub.execute_input":"2024-09-17T00:10:24.421269Z","iopub.status.idle":"2024-09-17T00:10:24.452840Z","shell.execute_reply.started":"2024-09-17T00:10:24.421223Z","shell.execute_reply":"2024-09-17T00:10:24.451458Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"$2857.51 was spent by non-members at Bakershire.\n","output_type":"stream"}]},{"cell_type":"code","source":"# Write the analyses to a file\nwith open('analysis_report.txt', 'w') as file:\n    file.write(f\"Total number of apples purchased in cash: {total_apples_in_cash}\\n\")\n    file.write(f\"Total cash spent on apples: ${total_apple_cost:.2f}\\n\")\n    file.write(f\"Total money spent by non-member customers at Bakershire store: ${total_bakershire_nonmember_cost:.2f}\\n\")\n\nprint(\"Analysis report generated and saved as 'analysis_report.txt'\")","metadata":{"execution":{"iopub.status.busy":"2024-09-17T00:10:29.817519Z","iopub.execute_input":"2024-09-17T00:10:29.817976Z","iopub.status.idle":"2024-09-17T00:10:29.826139Z","shell.execute_reply.started":"2024-09-17T00:10:29.817932Z","shell.execute_reply":"2024-09-17T00:10:29.824792Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Analysis report generated and saved as 'analysis_report.txt'\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}